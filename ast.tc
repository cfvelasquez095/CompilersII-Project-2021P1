%option lang = "c++"
%option namespace = "Ast" 


%decls %{
    #include <cstring>
    #include <unordered_map>
    #include <iostream>
    #include <sstream>
    #include <vector>
    #include <string>
    #include <algorithm>
    namespace Ast { class Expr; }
    using id_list = std::vector<std::string>;
    using list = std::vector<Ast::Expr*>;
    using mult_expr_list = std::vector<Ast::Expr*>;
    using string_t = std::string;
%}

%{
    #include "ast.h" 
    #include <unordered_map>

    std::unordered_map<std::string, std::string> variables;

    string_t msg = "";

    int temp_index = 0;
    std::string newTemp()
    {    
        return "dword [temp" + std::to_string(temp_index++) + "]";
    }

    int label_index = 0;
    std::string newLabel(std::string label)
    {
        return label + std::to_string(label_index++);
    }

    int char_index = 0;
    std::string newChar()
    {
        return "dword [charTemp" + std::to_string(char_index++) + "]";
    }

    int string_index = 0;
    std::string newString()
    {
        return "stringTemp" + std::to_string(string_index++);
    }

    std::string newVariable(std::string i, std::string datatype) {
        variables.emplace(i, datatype);
        return "dword [" + i + "]";
    }
%}

%node Expr %abstract %typedef={
    %nocreate string_t code;
    %nocreate string_t place;
    %nocreate int type;         // 1 = Int, 2 = Char, 3 = String
} 
%node BinaryExpr Expr %abstract  = {
    Expr * expr1;
    Expr * expr2;
}

%node AddExpr   BinaryExpr
%node SubExpr   BinaryExpr
%node MultExpr  BinaryExpr
%node DivExpr   BinaryExpr
%node PowExpr   BinaryExpr
%node ModExpr   BinaryExpr
%node AndExpr   BinaryExpr
%node OrExpr    BinaryExpr
%node EqualsExpr        BinaryExpr
%node NotEqualsExpr     BinaryExpr
%node LessThanExpr      BinaryExpr
%node GreaterThanExpr   BinaryExpr
%node LessThanEqExpr    BinaryExpr
%node GreaterThanEqExpr BinaryExpr

%node NumberExpr Expr = {
    int val;
}

%node IdentExpr Expr = {
    string_t id;
}

%node StringConst Expr = {
    string_t value;
}

%node CharConst Expr = {
    string_t value;
}

%node TrueExpr Expr = {

}

%node FalseExpr Expr = {

}

%node IntType Expr = {
    
}

%node CharType Expr = {
    
}

%node StringType Expr = {
    
}

%node BoolType Expr = {
    
}

%node VarDeclaration Expr = {
    Expr *var_type;
    id_list *id;
}

%node VarSection Expr = {
    list varDeclarations;
}

%node AssignExpr Expr = {
    string_t id;
    Expr *expr;
}

%node ExprList Expr = {
    list exprList;
}

%node PrintExpr Expr= {
    Expr *expr;
}

%node WhileStmt Expr = {
    Expr *cond;
    Expr *block;
}

%node DoWhileStmt Expr = {
    Expr *cond;
    Expr *block;
}

%node IfStmt Expr = {
    Expr *cond;
    Expr *true_block;
    Expr *false_block;
}

%node ForStmt Expr = {
    Expr *assign;
    Expr *cond;
    Expr *block;
}

%node NotExpr Expr = {
    Expr *expr;
}

%node UnaryExpr Expr = {
    Expr *expr;
}

%operation void genCode(Expr *e)

genCode(NumberExpr) {
    e->place = newTemp();
    e->code = "mov " + e->place + ", " + std::to_string(e->val);
    e->type = 1;
}

genCode(IdentExpr) {
    e->place = "dword[" + e->id + "]";

    if (variables[e->id] == "Char") {
        e->type = 2;
    } else {
        e->type = 1;
    }    
}

genCode(ExprList) {
    for (const auto &i: e->exprList) {
        genCode(i);
        e->place = i->place;
        e->code += i->code;
        e->type = i->type;
    }
}

genCode(VarDeclaration) {
    genCode(e->var_type);

    std::string type = e->var_type->place;
    
    for (const auto &id: *e->id) {
        newVariable(id, type);
    }

    if (type == "Char") {
        e->type = 2;
    } else {
        e->type = 1;
    } 
}

genCode(VarSection) {
    for (const auto &i: e->varDeclarations) {
        genCode(i);
    }
}

genCode(TrueExpr) {
    e->place = newTemp();
    e->code = "mov " + e->place + ", 1";
    e->type = 1;
}

genCode(FalseExpr) {
    e->place = newTemp();
    e->code = "mov " + e->place + ", 0";
    e->type = 1;
}

genCode(CharConst) {
    e->place = newChar();
    e->code = "mov " + e->place + ", \"" + e->value + "\"";
    e->type = 2;
}

genCode(StringConst) {
    e->place = newString();
    e->type = 3;
    msg = e->value;
}

genCode(IntType) {
    e->place = "Entero";
}

genCode(CharType) {
    e->place = "Char";
}

genCode(StringType) {
    e->place = "String";
}

genCode(BoolType) {
    e->place = "Booleano";
}

genCode(AddExpr) {
    genCode(e->expr1);
    genCode(e->expr2);

    e->place = e->expr1->place;

    std::ostringstream out;

    out << e->expr1->code << '\n'
        << e->expr2->code << '\n'
        << "mov eax, " << e-> expr2->place << '\n'
        << "add " << e->expr1->place << " , eax\n";

    e->code= out.str();
}

genCode(SubExpr) {
    genCode(e->expr1);
    genCode(e->expr2);

    e->place = e->expr1->place;

    std::ostringstream out;

    out << e->expr1->code << '\n'
        << e->expr2->code << '\n'
        << "mov eax, " << e-> expr2->place << '\n'
        << "sub " << e->expr1->place << " , eax\n";

    e->code= out.str();
}

genCode(MultExpr) {
    genCode(e->expr1);
    genCode(e->expr2); 
    e->place = e->expr1->place;

    std::ostringstream out;

    out << e->expr1->code << '\n'
        << e ->expr2->code << '\n'
        << "mov eax , " << e->expr1->place << '\n'
        << "mul " << e->expr2->place << '\n'
        << "mov " << e->place << " ,eax\n";

    e->code= out.str();
}

genCode(DivExpr) {
    genCode(e->expr1);
    genCode(e->expr2);

    e->place = e->expr1->place;

    std::ostringstream out;

    out << e->expr1->code << '\n'
        << e->expr2->code << '\n'
        << "mov eax, " << e->expr1->place << '\n'
        << "mov edx, " << "0" << '\n'
        << "div " << e->expr2->place<< '\n'
        << "mov " << e->place << " ,eax\n";

    e->code= out.str();
}

genCode(PowExpr) {

}

genCode(ModExpr) {
    genCode(e->expr1);
    genCode(e->expr2);

    e->place = e->expr1->place;

    std::ostringstream out;

    out << e->expr1->code << '\n'
        << e->expr2->code << '\n'
        << "mov eax, " << e->expr1->place << '\n'
        << "mov ebx, " << e->expr2->place << '\n'
        << "cdq\n"
        << "div ebx\n"
        << "mov " << e->place << ", edx\n";

    e->code= out.str();
}

genCode(AndExpr) {
    genCode(e->expr1);
    genCode(e->expr2);

    e->place = newTemp();

    std::ostringstream out;

    out << e->expr1->code << '\n'
        << e->expr2->code << '\n'
        << "mov ecx, " << e->expr1->place << '\n'
        << "xor eax, eax\n"
        << "cmp 1, ecx\n"
        << "sete al\n"
        << "mov " << e->place << '\n'
        << "xor eax, eax\n"
        << "mov ecx, " << e->expr2->place << '\n'
        << "cmp 1, ecx\n"
        << "sete al\n"
        << "cmp " << e->place << ", eax\n"
        << "sete al\n"
        << "mov " << e->place << ", eax\n";
        
    e->code= out.str();
}

genCode(OrExpr) {
    genCode(e->expr1);
    genCode(e->expr2);

    e->place = newTemp();

    std::ostringstream out;

    out << e->expr1->code << '\n'
        << e->expr2->code << '\n'
        << "mov ecx, " << e->expr1->place << '\n'
        << "mov " << e->place << '\n'
        << "mov ecx, " << e->expr2->place << '\n'
        << "or " << e->place << ", ecx\n";

    e->code= out.str();
}

genCode(UnaryExpr) {
    genCode(e->expr);

    std::ostringstream out;

    out << "mov eax, " << e->expr->place << '\n'
        << "imul eax, -1\n"
        << "mov " << e->place << ", eax\n";
    
    e->code = out.str();
}

genCode(NotExpr) {
    genCode(e->expr);

    std::ostringstream out;

    out << "mov eax, " << e->expr->place << '\n'
        << "mov " << e->place << ", eax\n"
        << "not " << e->place << '\n';

    e->code = out.str();
}

genCode(EqualsExpr) {
    genCode(e->expr1);
    genCode(e->expr2);

    e->place= e->expr1->place;

    std::ostringstream out;

    out << e->expr1->code << '\n'
        << e->expr2->code << '\n'
        << "mov ecx, " << e->expr2->place << '\n'
        << "xor eax, eax\n"
        << "cmp " << e->expr1->place << " , ecx\n"
        << "sete al\n"
        << "mov "<< e->place << ", eax\n";

    e->code = out.str();
}

genCode(NotEqualsExpr) {
    genCode(e->expr1);
    genCode(e->expr2);

    e->place = newTemp();

    std::ostringstream out;

    out << e->expr1->code << '\n'
        << e->expr2->code << '\n'
        << "mov ecx, " << e->expr2->place << '\n'
        << "xor eax, eax\n"
        << "cmp " << e->expr1->place << " , ecx\n"
        << "setne al\n"
        << "mov " << e->place << ", eax\n";

    e->code = out.str();
}

genCode(LessThanExpr) { 
    genCode(e->expr1);
    genCode(e->expr2);

    e->place = newTemp();

    std::ostringstream out;

    out << e->expr1->code << '\n'
        << e->expr2->code << '\n'
        << "mov ecx, " << e->expr2->place << '\n'
        << "xor eax, eax\n"
        << "cmp " << e->expr1->place << " , ecx\n"
        << "setl al\n"
        << "mov "<< e->place << ", eax\n";

    e->code = out.str();
}

genCode(LessThanEqExpr) { 
    genCode(e->expr1);
    genCode(e->expr2);

    e->place = newTemp();

    std::ostringstream out;

    out << e->expr1->code << '\n'
        << e->expr2->code << '\n'
        << "mov ecx, " << e->expr2->place << '\n'
        << "xor eax, eax\n"
        << "cmp " << e->expr1->place << " , ecx\n"
        << "setle al\n"
        << "mov "<< e->place << ", eax\n";

    e->code = out.str();
}

genCode(GreaterThanExpr) {
    genCode(e->expr1);
    genCode(e->expr2);

    e->place = newTemp();

    std::ostringstream out;

    out << e->expr1->code << '\n'
        << e->expr2->code << '\n'
        << "mov ecx, " << e->expr2->place << '\n'
        << "xor eax, eax\n"
        << "cmp " << e->expr1->place << " , ecx\n"
        << "setg al\n"
        << "mov "<< e->place << ", eax\n";

    e->code = out.str();
}

genCode(GreaterThanEqExpr) {
    genCode(e->expr1);
    genCode(e->expr2);

    e->place = newTemp();

    std::ostringstream out;

    out << e->expr1->code << '\n'
        << e->expr2->code << '\n'
        << "mov ecx, " << e->expr2->place << '\n'
        << "xor eax, eax\n"
        << "cmp " << e->expr1->place << " , ecx\n"
        << "setge al\n"
        << "mov "<< e->place << ", eax\n";

    e->code = out.str();
}

genCode(AssignExpr) {
    genCode(e->expr);

    std::ostringstream out;
    std::unordered_map<std::string, std::string>::const_iterator it = variables.find(e->id);

    if (it != variables.end()) {
        e->place = "dword[" + e->id + "]";
    }

    out << e->expr->code << '\n'
        << "mov eax, " + e->expr->place << '\n'
        << "mov " + e->place + ", eax\n";

    e->code = out.str();

    if (variables[e->id] == "Char") {
        e->type = 2;
    } else {
        e->type = 1;
    }
}

genCode(PrintExpr) {
    genCode(e->expr);

    std::ostringstream out;

    if(e->expr->type == 2) {
        out << e->expr->code << '\n'
            << "push " << e->expr->place << '\n'
            << "push formatChar\n"
            << "call printf\n"
            << "add esp, 8\n";
    } else if(e->expr->type == 3) {
        out << e->expr->code << '\n'
            << "push " << e->expr->place << '\n'
            << "call printf\n"
            << "add esp, 4\n";
    } else {
        out << e->expr->code << '\n'
            << "push " << e->expr->place << '\n'
            << "push format\n"
            << "call printf\n"
            << "add esp, 8\n";
    }

    e->code = out.str();
}

genCode(IfStmt) {
    genCode(e->cond);
    genCode(e->true_block);

    std::ostringstream out;
    std::string end_if_label = newLabel("end_if");

    if (e->false_block != nullptr) {
        genCode(e->false_block);
        
        std::string else_label = newLabel("else_label");

        out << e->cond->code << '\n'
            << "cmp " << e->cond->place << '\n'
            << "je " << else_label << '\n'
            << e->true_block->code << '\n'
            << "jmp " << end_if_label << '\n'
            << else_label << ":\n"
            << e->false_block->code << '\n'
            << end_if_label << ":\n";
    } else {
        out << e->cond->code << '\n'
            << "cmp " << e->cond->place << ", 0\b"
            << "je " << end_if_label << '\n'
            << e->true_block->code << '\n'
            << end_if_label << ":\n";
    }

    e->code = out.str();
}

genCode(WhileStmt) {
    genCode(e->cond);
    genCode(e->block);

    std::ostringstream out;
    std::string start_label = newLabel("start_while");
    std::string end_label = newLabel("end_while");

    out << start_label << ":\n"
        << e->cond->code << '\n'
        << "cmp " << e->cond->place << ", 0\n"
        << "je " << end_label << '\n'
        << e->block->code << '\n'
        << "jmp " << start_label << '\n'
        << end_label << ":\n";

    e->code = out.str();
}

genCode(DoWhileStmt) {
    genCode(e->cond);
    genCode(e->block);

    std::ostringstream out;
    std::string start_label = newLabel("start_dowhile");
    std::string end_label = newLabel("end_dowhile");

    out << start_label << ":\n"
        << e->block->code << '\n'
        << e->cond->code << '\n'
        << "cmp " << e->cond->place << ", 1\n"
        << "je " << end_label << '\n'
        << "jmp " << start_label << '\n'
        << end_label << ":\n";

    e->code = out.str();
}

genCode(ForStmt) {
    genCode(e->assign);
    genCode(e->cond);
    genCode(e->block);

    std::string start_label = newLabel("start_for");
    std::string end_label = newLabel("end_for");

    std::ostringstream out;

    out << e->assign->code << '\n'
        << e->cond->code << '\n'
        << start_label << ":\n"
        << "mov edx, " << e->cond->place << '\n'
        << "cmp " << e->assign->place << ", edx\n"
        << "jg " << end_label << '\n'
        << e->block->code << '\n'
        << "inc " << e->assign->place << '\n'
        << "jmp " << start_label << '\n'
        << end_label << ":\n";

    e->code= out.str();
}